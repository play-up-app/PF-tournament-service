#!/usr/bin/env node

/**
 * üöÄ Script d'aide pour Dependabot - Version Junior-Friendly
 * 
 * Ce script vous aide √† g√©rer les mises √† jour de d√©pendances
 * de mani√®re simple et efficace.
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

// Couleurs pour une meilleure lisibilit√©
const colors = {
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

// Fonctions utilitaires
const log = (message, color = colors.reset) => {
  console.log(`${color}${message}${colors.reset}`);
};

const logSuccess = (message) => log(`‚úÖ ${message}`, colors.green);
const logWarning = (message) => log(`‚ö†Ô∏è ${message}`, colors.yellow);
const logError = (message) => log(`‚ùå ${message}`, colors.red);
const logInfo = (message) => log(`‚ÑπÔ∏è ${message}`, colors.blue);

/**
 * V√©rifie les vuln√©rabilit√©s de s√©curit√©
 */
function checkSecurityVulnerabilities() {
  logInfo('üîí V√©rification des vuln√©rabilit√©s de s√©curit√©...');
  
  try {
    const auditResult = execSync('npm audit --json', { encoding: 'utf8' });
    const audit = JSON.parse(auditResult);
    
    if (audit.metadata.vulnerabilities.total === 0) {
      logSuccess('Aucune vuln√©rabilit√© d√©tect√©e !');
      return true;
    }
    
    logWarning(`Vuln√©rabilit√©s d√©tect√©es : ${audit.metadata.vulnerabilities.total}`);
    
    // Afficher les vuln√©rabilit√©s critiques
    if (audit.metadata.vulnerabilities.critical > 0) {
      logError(`Vuln√©rabilit√©s critiques : ${audit.metadata.vulnerabilities.critical}`);
    }
    
    if (audit.metadata.vulnerabilities.high > 0) {
      logWarning(`Vuln√©rabilit√©s √©lev√©es : ${audit.metadata.vulnerabilities.high}`);
    }
    
    return false;
  } catch (error) {
    logError('Erreur lors de la v√©rification des vuln√©rabilit√©s');
    console.error(error.message);
    return false;
  }
}

/**
 * V√©rifie les d√©pendances obsol√®tes
 */
function checkOutdatedDependencies() {
  logInfo('üì¶ V√©rification des d√©pendances obsol√®tes...');
  
  try {
    const outdatedResult = execSync('npm outdated --json', { encoding: 'utf8' });
    const outdated = JSON.parse(outdatedResult);
    
    if (Object.keys(outdated).length === 0) {
      logSuccess('Toutes les d√©pendances sont √† jour !');
      return [];
    }
    
    logWarning(`${Object.keys(outdated).length} d√©pendances obsol√®tes d√©tect√©es`);
    
    // Afficher les d√©pendances obsol√®tes
    Object.entries(outdated).forEach(([packageName, info]) => {
      console.log(`  ${packageName}: ${info.current} ‚Üí ${info.latest}`);
    });
    
    return Object.keys(outdated);
  } catch (error) {
    // npm outdated retourne un code d'erreur si des d√©pendances sont obsol√®tes
    if (error.status === 1) {
      logWarning('Des d√©pendances sont obsol√®tes');
      return [];
    }
    logError('Erreur lors de la v√©rification des d√©pendances obsol√®tes');
    console.error(error.message);
    return [];
  }
}

/**
 * Lance les tests
 */
function runTests() {
  logInfo('üß™ Lancement des tests...');
  
  try {
    execSync('npm test', { stdio: 'inherit' });
    logSuccess('Tous les tests passent !');
    return true;
  } catch (error) {
    logError('Les tests ont √©chou√©');
    return false;
  }
}

/**
 * V√©rifie la couverture de tests
 */
function checkTestCoverage() {
  logInfo('üìä V√©rification de la couverture de tests...');
  
  try {
    const coverageResult = execSync('npm run test:coverage', { encoding: 'utf8' });
    
    // Extraire le pourcentage de couverture
    const coverageMatch = coverageResult.match(/All files\s+\|\s+(\d+\.\d+)%/);
    if (coverageMatch) {
      const coverage = parseFloat(coverageMatch[1]);
      if (coverage >= 80) {
        logSuccess(`Couverture de tests : ${coverage}% (objectif atteint)`);
      } else {
        logWarning(`Couverture de tests : ${coverage}% (objectif : 80%)`);
      }
    }
    
    return true;
  } catch (error) {
    logError('Erreur lors de la v√©rification de la couverture');
    return false;
  }
}

/**
 * V√©rifie la taille du bundle
 */
function checkBundleSize() {
  logInfo('üì¶ V√©rification de la taille du bundle...');
  
  try {
    // V√©rifier si le script build existe
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (!packageJson.scripts.build) {
      logWarning('Script build non trouv√©, impossible de v√©rifier la taille du bundle');
      return true;
    }
    
    execSync('npm run build', { stdio: 'inherit' });
    logSuccess('Build r√©ussi !');
    return true;
  } catch (error) {
    logError('Erreur lors du build');
    return false;
  }
}

/**
 * Affiche les informations sur une d√©pendance
 */
function showPackageInfo(packageName) {
  logInfo(`üìã Informations sur ${packageName}...`);
  
  try {
    const info = execSync(`npm view ${packageName} --json`, { encoding: 'utf8' });
    const packageInfo = JSON.parse(info);
    
    console.log(`\n${colors.bold}Informations sur ${packageName}:${colors.reset}`);
    console.log(`  Version actuelle : ${packageInfo.version}`);
    console.log(`  Description : ${packageInfo.description}`);
    console.log(`  Licence : ${packageInfo.license}`);
    console.log(`  Derni√®re mise √† jour : ${packageInfo.time?.modified || 'N/A'}`);
    console.log(`  D√©pendances : ${packageInfo.dependencies ? Object.keys(packageInfo.dependencies).length : 0}`);
    
    if (packageInfo.homepage) {
      console.log(`  Page d'accueil : ${packageInfo.homepage}`);
    }
    
    if (packageInfo.repository?.url) {
      console.log(`  Repository : ${packageInfo.repository.url}`);
    }
    
  } catch (error) {
    logError(`Impossible de r√©cup√©rer les informations sur ${packageName}`);
  }
}

/**
 * Affiche l'aide
 */
function showHelp() {
  console.log(`
${colors.bold}üöÄ Script d'aide pour Dependabot - Version Junior-Friendly${colors.reset}

${colors.blue}Utilisation:${colors.reset}
  node scripts/dependabot-helper.js [commande]

${colors.blue}Commandes disponibles:${colors.reset}
  ${colors.green}security${colors.reset}     - V√©rifier les vuln√©rabilit√©s de s√©curit√©
  ${colors.green}outdated${colors.reset}     - V√©rifier les d√©pendances obsol√®tes
  ${colors.green}test${colors.reset}         - Lancer les tests
  ${colors.green}coverage${colors.reset}     - V√©rifier la couverture de tests
  ${colors.green}build${colors.reset}        - V√©rifier le build
  ${colors.green}all${colors.reset}          - Ex√©cuter toutes les v√©rifications
  ${colors.green}info <package>${colors.reset} - Afficher les infos d'un package
  ${colors.green}help${colors.reset}         - Afficher cette aide

${colors.blue}Exemples:${colors.reset}
  node scripts/dependabot-helper.js security
  node scripts/dependabot-helper.js all
  node scripts/dependabot-helper.js info express

${colors.yellow}üí° Conseil:${colors.reset} Utilisez ce script avant de merger une PR Dependabot !
`);
}

/**
 * Fonction principale
 */
function main() {
  const command = process.argv[2];
  const packageName = process.argv[3];
  
  log(`${colors.bold}üöÄ Script d'aide pour Dependabot${colors.reset}\n`);
  
  switch (command) {
    case 'security':
      checkSecurityVulnerabilities();
      break;
      
    case 'outdated':
      checkOutdatedDependencies();
      break;
      
    case 'test':
      runTests();
      break;
      
    case 'coverage':
      checkTestCoverage();
      break;
      
    case 'build':
      checkBundleSize();
      break;
      
    case 'all':
      logInfo('üîç Ex√©cution de toutes les v√©rifications...\n');
      
      const securityOk = checkSecurityVulnerabilities();
      console.log('');
      
      const outdated = checkOutdatedDependencies();
      console.log('');
      
      const testsOk = runTests();
      console.log('');
      
      const coverageOk = checkTestCoverage();
      console.log('');
      
      const buildOk = checkBundleSize();
      console.log('');
      
      // R√©sum√©
      logInfo('üìä R√©sum√© des v√©rifications :');
      console.log(`  üîí S√©curit√© : ${securityOk ? '‚úÖ' : '‚ùå'}`);
      console.log(`  üì¶ D√©pendances : ${outdated.length === 0 ? '‚úÖ' : '‚ö†Ô∏è'}`);
      console.log(`  üß™ Tests : ${testsOk ? '‚úÖ' : '‚ùå'}`);
      console.log(`  üìä Couverture : ${coverageOk ? '‚úÖ' : '‚ùå'}`);
      console.log(`  üì¶ Build : ${buildOk ? '‚úÖ' : '‚ùå'}`);
      
      if (securityOk && outdated.length === 0 && testsOk && coverageOk && buildOk) {
        logSuccess('\nüéâ Toutes les v√©rifications sont pass√©es ! La PR peut √™tre merg√©e.');
      } else {
        logWarning('\n‚ö†Ô∏è Certaines v√©rifications ont √©chou√©. V√©rifiez avant de merger.');
      }
      break;
      
    case 'info':
      if (!packageName) {
        logError('Veuillez sp√©cifier un nom de package');
        console.log('Exemple: node scripts/dependabot-helper.js info express');
        break;
      }
      showPackageInfo(packageName);
      break;
      
    case 'help':
    default:
      showHelp();
      break;
  }
}

// Ex√©cuter le script
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
